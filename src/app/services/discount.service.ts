import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { environment } from '../../environments/environment';

export interface Discount {
  id?: string;
  code: string;
  type: 'percent' | 'fixed';
  value: number;
  minSpend?: number;
  maxDiscount?: number;
  usageLimit?: number;
  usedCount?: number;
  expireAt?: any;
  isActive: boolean;
  createdAt?: any;
  status?: string;
}

@Injectable({ providedIn: 'root' })
export class DiscountService {
  private baseUrl = `${environment.apiBaseUrl}/discounts`;

  constructor(private http: HttpClient) {}

  // ---------- üß© ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Admin ----------

  /** ‡∏î‡∏∂‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Admin) */
  getDiscounts() {
    return this.http.get<Discount[]>(this.baseUrl);
  }

  /** ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà (Admin) */
  createDiscount(payload: Discount) {
    return this.http.post<{ success: boolean; message: string }>(
      this.baseUrl,
      payload
    );
  }

  /** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î (Admin) */
  updateDiscount(id: string, payload: Partial<Discount>) {
    return this.http.put<{ success: boolean; message: string }>(
      `${this.baseUrl}/${id}`,
      payload
    );
  }

  /** ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (Admin) */
  toggleDiscount(id: string, isActive: boolean) {
    return this.http.put<{ success: boolean; message: string }>(
      `${this.baseUrl}/${id}/toggle`,
      { isActive }
    );
  }

  /** ‡∏•‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î (Admin) */
  deleteDiscount(id: string) {
    return this.http.delete<{ success: boolean; message: string }>(
      `${this.baseUrl}/${id}`
    );
  }

  // ---------- üë• ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ----------

  /** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ */
  checkCode(code: string, userId: string, total: number) {
    return this.http.get<{
      success: boolean;
      discount?: Discount;
      message?: string;
    }>(`${this.baseUrl}/check/${code}`, {
      params: { userId, total },
    });
  }

  /** ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î */
  useCode(code: string, userId: string) {
    return this.http.post<{ success: boolean; message: string }>(
      `${this.baseUrl}/use`,
      { userId, code }
    );
  }
}
