import { ChangeDetectorRef, Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ActivatedRoute, Router } from '@angular/router';
import { ApiService, Game } from '../../services/api.service';
import { Header } from '../header/header';
import { AuthService } from '../../services/auth.service';
import { switchMap } from 'rxjs/operators';
import { of } from 'rxjs';
import { CartItem, CartService } from '../../services/cart';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-game-detail',
  standalone: true,
  imports: [CommonModule, Header],
  templateUrl: './game-detail.html',
  styleUrls: ['./game-detail.scss']
})
export class GameDetail implements OnInit {

  game: Game | null = null;
  loading = true;
  error = '';
  alreadyOwned = false; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

  categoryName: string = '';
  rank: number | null = null;

  constructor(
    private route: ActivatedRoute,
    private api: ApiService,
    private auth: AuthService,
    private cartService: CartService,
    private cdr: ChangeDetectorRef,
    private router: Router
  ) {}

  ngOnInit(): void {
    console.log('üü¢ [GameDetail] Component initialized');

    this.route.paramMap
      .pipe(
        switchMap(paramMap => {
          const gameId = paramMap.get('id');
          if (!gameId) {
            this.error = 'Game ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
            this.loading = false;
            this.cdr.detectChanges();
            return of(null);
          }

          this.loading = true;
          this.error = '';
          return this.api.getGameById(gameId);
        })
      )
      .subscribe({
        next: res => {
          if (res && res.success && res.game) {
            const g = res.game;

            // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á releasedAt
            if (g.releasedAt) {
              if (typeof g.releasedAt === 'object' && ('_seconds' in g.releasedAt || 'seconds' in g.releasedAt)) {
                const seconds = g.releasedAt._seconds || g.releasedAt.seconds;
                g.releasedAt = new Date(seconds * 1000);
              } else if (typeof g.releasedAt === 'string') {
                const parsed = new Date(g.releasedAt);
                g.releasedAt = isNaN(parsed.getTime()) ? null : parsed;
              }
            } else {
              g.releasedAt = null;
            }

            this.game = g;
            this.categoryName = g.categoryName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó';
            this.rank = typeof g.rank === 'number' ? g.rank : null;

            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡πÄ‡∏Å‡∏°‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const user = this.auth.getUser();
            if (user && user.library?.includes(g.id)) {
              this.alreadyOwned = true;
            } else {
              this.alreadyOwned = false;
            }

          } else {
            this.error = res?.message || '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°';
          }

          this.loading = false;
          this.cdr.detectChanges();
        },
        error: err => {
          console.error('‚ùå [API Error] getGameById failed:', err);
          this.error = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Å‡∏°';
          this.loading = false;
          this.cdr.detectChanges();
        }
      });
  }

  buyNow(): void {
    if (!this.game) {
      Swal.fire('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°', '', 'warning');
      return;
    }

    const user = this.auth.getUser();
    if (!user) {
      Swal.fire('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏°', '', 'info');
      return;
    }

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡∏ã‡πâ‡∏≥
    if (this.alreadyOwned) {
      Swal.fire({
        icon: 'info',
        title: '‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÄ‡∏Å‡∏°‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß!',
        text: `${this.game.name} ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á‡πÄ‡∏Å‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß`,
        confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
      });
      return;
    }

    Swal.fire({
      title: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠?',
      text: `‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ ${this.game.name} ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: '‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏•‡∏¢',
      cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
    }).then((result) => {
      if (!result.isConfirmed) return;

      this.api.buyGame(this.game!.id).subscribe({
        next: (res) => {
          if (res.success) {
            user.wallet = res.newWallet ?? user.wallet;
            user.library = [...(user.library || []), this.game!.id];
            this.auth.setUser(user);
            this.alreadyOwned = true; // ‚úÖ ‡∏´‡∏•‡∏±‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏´‡πâ disable ‡∏õ‡∏∏‡πà‡∏°
            this.cdr.detectChanges();

            Swal.fire({
              icon: 'success',
              title: '‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
              html: `
                <b>${this.game!.name}</b> ‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß<br>
                ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: <b>${user.wallet} ‡∏ö‡∏≤‡∏ó</b>
              `,
              confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
            });
          } else {
            Swal.fire({
              icon: 'error',
              title: '‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
              text: res.order?.message || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏'
            });
          }
        },
        error: (err) => {
          console.error('‚ùå [BuyNow Error]:', err);
          Swal.fire({
            icon: 'error',
            title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏°',
            text: '‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á'
          });
        }
      });
    });
  }

  addToCart(): void {
    if (!this.game) {
      Swal.fire('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°', '', 'warning');
      return;
    }

    const itemToAdd: CartItem = {
      id: this.game.id,
      name: this.game.name,
      imageUrl: this.game.imageUrl,
      description: this.game.description || '',
      price: this.game.price,
      quantity: 1,
      selected: true
    };

    this.cartService.addToCart(itemToAdd);

    Swal.fire({
      icon: 'success',
      title: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß!',
      text: `${this.game.name} ‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì`,
      timer: 1500,
      showConfirmButton: false
    });

    this.router.navigate(['/mycart']);
  }
}
